//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudService.GreenPayECheck {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="CheckProcessing", ConfigurationName="GreenPayECheck.eCheckSoap")]
    public interface eCheckSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftRTV", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult OneTimeDraftRTV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftRTV", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> OneTimeDraftRTVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftBV", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult OneTimeDraftBV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftBV", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> OneTimeDraftBVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftRTV", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult RecurringDraftRTV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftRTV", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> RecurringDraftRTVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftBV", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult RecurringDraftBV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftBV", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> RecurringDraftBVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/VerificationResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult VerificationResult(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/VerificationResult", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> VerificationResultAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/VerificationOverride", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.DraftResult VerificationOverride(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/VerificationOverride", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> VerificationOverrideAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CombinationInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.InvoiceResult CombinationInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string InitialAmount, string InitialPaymentDate, string RecurringAmount, string RecurringPaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CombinationInvoice", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> CombinationInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string InitialAmount, string InitialPaymentDate, string RecurringAmount, string RecurringPaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.InvoiceResult RecurringInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringInvoice", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> RecurringInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeInvoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.InvoiceResult OneTimeInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeInvoice", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> OneTimeInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/InvoiceStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.InvoiceResult InvoiceStatus(string Client_ID, string ApiPassword, string Invoice_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/InvoiceStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> InvoiceStatusAsync(string Client_ID, string ApiPassword, string Invoice_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/BillPayCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.BillPayCheckResult BillPayCheck(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/BillPayCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> BillPayCheckAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringBillPayCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.BillPayCheckResult RecurringBillPayCheck(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringBillPayCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> RecurringBillPayCheckAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/BillPayCheckNoBankInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.BillPayCheckResult BillPayCheckNoBankInfo(string Client_ID, string ApiPassword, string Name, string Address1, string Address2, string City, string State, string Zip, string Country, string CheckMemo, string CheckAmount, string CheckDate, string CheckNumber, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/BillPayCheckNoBankInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> BillPayCheckNoBankInfoAsync(string Client_ID, string ApiPassword, string Name, string Address1, string Address2, string City, string State, string Zip, string Country, string CheckMemo, string CheckAmount, string CheckDate, string CheckNumber, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringBillPayCheckNoBankInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.BillPayCheckResult RecurringBillPayCheckNoBankInfo(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringBillPayCheckNoBankInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> RecurringBillPayCheckNoBankInfoAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char);
        
        // CODEGEN: Parameter 'ImageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/UploadSignatureImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.UploadSignatureImageResponse UploadSignatureImage(CloudService.GreenPayECheck.UploadSignatureImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/UploadSignatureImage", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.UploadSignatureImageResponse> UploadSignatureImageAsync(CloudService.GreenPayECheck.UploadSignatureImageRequest request);
        
        // CODEGEN: Parameter 'ImageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftWithSignatureImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse OneTimeDraftWithSignatureImage(CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/OneTimeDraftWithSignatureImage", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse> OneTimeDraftWithSignatureImageAsync(CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest request);
        
        // CODEGEN: Parameter 'ImageData' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftWithSignatureImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse RecurringDraftWithSignatureImage(CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RecurringDraftWithSignatureImage", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse> RecurringDraftWithSignatureImageAsync(CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CancelCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.CancelCheckResult CancelCheck(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CancelCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.CancelCheckResult> CancelCheckAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RefundCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.RefundCheckResult RefundCheck(string Client_ID, string ApiPassword, string Check_ID, string RefundMemo, string RefundAmount, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/RefundCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.RefundCheckResult> RefundCheckAsync(string Client_ID, string ApiPassword, string Check_ID, string RefundMemo, string RefundAmount, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckNote", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.CheckNoteResult CheckNote(string Client_ID, string ApiPassword, string Check_ID, string Note, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckNote", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckNoteResult> CheckNoteAsync(string Client_ID, string ApiPassword, string Check_ID, string Note, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckNoPhoneVerification", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.CheckNoPhoneVerificationResult CheckNoPhoneVerification(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckNoPhoneVerification", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckNoPhoneVerificationResult> CheckNoPhoneVerificationAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/ProcessInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.ProcessInfoResult ProcessInfo(string Client_ID, string ApiPassword, string Process_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/ProcessInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.ProcessInfoResult> ProcessInfoAsync(string Client_ID, string ApiPassword, string Process_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        CloudService.GreenPayECheck.CheckStatusResult CheckStatus(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
        
        [System.ServiceModel.OperationContractAttribute(Action="CheckProcessing/CheckStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckStatusResult> CheckStatusAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class DraftResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string verifyResultField;
        
        private string verifyResultDescriptionField;
        
        private string checkNumberField;
        
        private string check_IDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string VerifyResult {
            get {
                return this.verifyResultField;
            }
            set {
                this.verifyResultField = value;
                this.RaisePropertyChanged("VerifyResult");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string VerifyResultDescription {
            get {
                return this.verifyResultDescriptionField;
            }
            set {
                this.verifyResultDescriptionField = value;
                this.RaisePropertyChanged("VerifyResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
                this.RaisePropertyChanged("CheckNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Check_ID {
            get {
                return this.check_IDField;
            }
            set {
                this.check_IDField = value;
                this.RaisePropertyChanged("Check_ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class CheckStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string verifyResultField;
        
        private string verifyResultDescriptionField;
        
        private string verifyOverridenField;
        
        private string deletedField;
        
        private string deletedDateField;
        
        private string processedField;
        
        private string processedDateField;
        
        private string rejectedField;
        
        private string rejectedDateField;
        
        private string checkNumberField;
        
        private string check_IDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string VerifyResult {
            get {
                return this.verifyResultField;
            }
            set {
                this.verifyResultField = value;
                this.RaisePropertyChanged("VerifyResult");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string VerifyResultDescription {
            get {
                return this.verifyResultDescriptionField;
            }
            set {
                this.verifyResultDescriptionField = value;
                this.RaisePropertyChanged("VerifyResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string VerifyOverriden {
            get {
                return this.verifyOverridenField;
            }
            set {
                this.verifyOverridenField = value;
                this.RaisePropertyChanged("VerifyOverriden");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
                this.RaisePropertyChanged("Deleted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string DeletedDate {
            get {
                return this.deletedDateField;
            }
            set {
                this.deletedDateField = value;
                this.RaisePropertyChanged("DeletedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Processed {
            get {
                return this.processedField;
            }
            set {
                this.processedField = value;
                this.RaisePropertyChanged("Processed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string ProcessedDate {
            get {
                return this.processedDateField;
            }
            set {
                this.processedDateField = value;
                this.RaisePropertyChanged("ProcessedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string Rejected {
            get {
                return this.rejectedField;
            }
            set {
                this.rejectedField = value;
                this.RaisePropertyChanged("Rejected");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string RejectedDate {
            get {
                return this.rejectedDateField;
            }
            set {
                this.rejectedDateField = value;
                this.RaisePropertyChanged("RejectedDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
                this.RaisePropertyChanged("CheckNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string Check_ID {
            get {
                return this.check_IDField;
            }
            set {
                this.check_IDField = value;
                this.RaisePropertyChanged("Check_ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class ProcessInfoResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string processTypeField;
        
        private string process_IDField;
        
        private string nameFirstField;
        
        private string nameLastField;
        
        private string companyNameField;
        
        private string emailAddressField;
        
        private string phoneField;
        
        private string phoneExtensionField;
        
        private string address1Field;
        
        private string address2Field;
        
        private string cityField;
        
        private string stateField;
        
        private string zipField;
        
        private string countryField;
        
        private string checkMemoField;
        
        private string checkAmountField;
        
        private string checkDateField;
        
        private string checkNumberField;
        
        private string recurringTypeField;
        
        private string recurringOffsetField;
        
        private string recurringPaymentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string ProcessType {
            get {
                return this.processTypeField;
            }
            set {
                this.processTypeField = value;
                this.RaisePropertyChanged("ProcessType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Process_ID {
            get {
                return this.process_IDField;
            }
            set {
                this.process_IDField = value;
                this.RaisePropertyChanged("Process_ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string NameFirst {
            get {
                return this.nameFirstField;
            }
            set {
                this.nameFirstField = value;
                this.RaisePropertyChanged("NameFirst");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string NameLast {
            get {
                return this.nameLastField;
            }
            set {
                this.nameLastField = value;
                this.RaisePropertyChanged("NameLast");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("CompanyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string EmailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
                this.RaisePropertyChanged("EmailAddress");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
                this.RaisePropertyChanged("Phone");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string PhoneExtension {
            get {
                return this.phoneExtensionField;
            }
            set {
                this.phoneExtensionField = value;
                this.RaisePropertyChanged("PhoneExtension");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string Address1 {
            get {
                return this.address1Field;
            }
            set {
                this.address1Field = value;
                this.RaisePropertyChanged("Address1");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string Address2 {
            get {
                return this.address2Field;
            }
            set {
                this.address2Field = value;
                this.RaisePropertyChanged("Address2");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
                this.RaisePropertyChanged("City");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
                this.RaisePropertyChanged("State");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
                this.RaisePropertyChanged("Zip");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
                this.RaisePropertyChanged("Country");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public string CheckMemo {
            get {
                return this.checkMemoField;
            }
            set {
                this.checkMemoField = value;
                this.RaisePropertyChanged("CheckMemo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public string CheckAmount {
            get {
                return this.checkAmountField;
            }
            set {
                this.checkAmountField = value;
                this.RaisePropertyChanged("CheckAmount");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public string CheckDate {
            get {
                return this.checkDateField;
            }
            set {
                this.checkDateField = value;
                this.RaisePropertyChanged("CheckDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
                this.RaisePropertyChanged("CheckNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=20)]
        public string RecurringType {
            get {
                return this.recurringTypeField;
            }
            set {
                this.recurringTypeField = value;
                this.RaisePropertyChanged("RecurringType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=21)]
        public string RecurringOffset {
            get {
                return this.recurringOffsetField;
            }
            set {
                this.recurringOffsetField = value;
                this.RaisePropertyChanged("RecurringOffset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public string RecurringPayments {
            get {
                return this.recurringPaymentsField;
            }
            set {
                this.recurringPaymentsField = value;
                this.RaisePropertyChanged("RecurringPayments");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class CheckNoPhoneVerificationResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class CheckNoteResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class RefundCheckResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string refundCheckNumberField;
        
        private string refundCheck_IDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string RefundCheckNumber {
            get {
                return this.refundCheckNumberField;
            }
            set {
                this.refundCheckNumberField = value;
                this.RaisePropertyChanged("RefundCheckNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string RefundCheck_ID {
            get {
                return this.refundCheck_IDField;
            }
            set {
                this.refundCheck_IDField = value;
                this.RaisePropertyChanged("RefundCheck_ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class CancelCheckResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class SignatureImageResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class BillPayCheckResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string checkNumberField;
        
        private string check_IDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
                this.RaisePropertyChanged("CheckNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Check_ID {
            get {
                return this.check_IDField;
            }
            set {
                this.check_IDField = value;
                this.RaisePropertyChanged("Check_ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CheckProcessing")]
    public partial class InvoiceResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string resultField;
        
        private string resultDescriptionField;
        
        private string paymentResultField;
        
        private string paymentResultDescriptionField;
        
        private string invoice_IDField;
        
        private string check_IDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
                this.RaisePropertyChanged("Result");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
                this.RaisePropertyChanged("ResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string PaymentResult {
            get {
                return this.paymentResultField;
            }
            set {
                this.paymentResultField = value;
                this.RaisePropertyChanged("PaymentResult");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string PaymentResultDescription {
            get {
                return this.paymentResultDescriptionField;
            }
            set {
                this.paymentResultDescriptionField = value;
                this.RaisePropertyChanged("PaymentResultDescription");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Invoice_ID {
            get {
                return this.invoice_IDField;
            }
            set {
                this.invoice_IDField = value;
                this.RaisePropertyChanged("Invoice_ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Check_ID {
            get {
                return this.check_IDField;
            }
            set {
                this.check_IDField = value;
                this.RaisePropertyChanged("Check_ID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadSignatureImage", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class UploadSignatureImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public string Client_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=1)]
        public string ApiPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=2)]
        public string Check_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=4)]
        public string x_delim_data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=5)]
        public string x_delim_char;
        
        public UploadSignatureImageRequest() {
        }
        
        public UploadSignatureImageRequest(string Client_ID, string ApiPassword, string Check_ID, byte[] ImageData, string x_delim_data, string x_delim_char) {
            this.Client_ID = Client_ID;
            this.ApiPassword = ApiPassword;
            this.Check_ID = Check_ID;
            this.ImageData = ImageData;
            this.x_delim_data = x_delim_data;
            this.x_delim_char = x_delim_char;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadSignatureImageResponse", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class UploadSignatureImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public CloudService.GreenPayECheck.SignatureImageResult UploadSignatureImageResult;
        
        public UploadSignatureImageResponse() {
        }
        
        public UploadSignatureImageResponse(CloudService.GreenPayECheck.SignatureImageResult UploadSignatureImageResult) {
            this.UploadSignatureImageResult = UploadSignatureImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OneTimeDraftWithSignatureImage", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class OneTimeDraftWithSignatureImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public string Client_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=1)]
        public string ApiPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=2)]
        public string Name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=3)]
        public string EmailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=4)]
        public string Phone;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=5)]
        public string PhoneExtension;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=6)]
        public string Address1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=7)]
        public string Address2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=8)]
        public string City;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=9)]
        public string State;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=10)]
        public string Zip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=11)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=12)]
        public string RoutingNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=13)]
        public string AccountNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=14)]
        public string BankName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=15)]
        public string CheckMemo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=16)]
        public string CheckAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=17)]
        public string CheckDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=18)]
        public string CheckNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=19)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=20)]
        public string x_delim_data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=21)]
        public string x_delim_char;
        
        public OneTimeDraftWithSignatureImageRequest() {
        }
        
        public OneTimeDraftWithSignatureImageRequest(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string x_delim_data, 
                    string x_delim_char) {
            this.Client_ID = Client_ID;
            this.ApiPassword = ApiPassword;
            this.Name = Name;
            this.EmailAddress = EmailAddress;
            this.Phone = Phone;
            this.PhoneExtension = PhoneExtension;
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.City = City;
            this.State = State;
            this.Zip = Zip;
            this.Country = Country;
            this.RoutingNumber = RoutingNumber;
            this.AccountNumber = AccountNumber;
            this.BankName = BankName;
            this.CheckMemo = CheckMemo;
            this.CheckAmount = CheckAmount;
            this.CheckDate = CheckDate;
            this.CheckNumber = CheckNumber;
            this.ImageData = ImageData;
            this.x_delim_data = x_delim_data;
            this.x_delim_char = x_delim_char;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="OneTimeDraftWithSignatureImageResponse", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class OneTimeDraftWithSignatureImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public CloudService.GreenPayECheck.DraftResult OneTimeDraftWithSignatureImageResult;
        
        public OneTimeDraftWithSignatureImageResponse() {
        }
        
        public OneTimeDraftWithSignatureImageResponse(CloudService.GreenPayECheck.DraftResult OneTimeDraftWithSignatureImageResult) {
            this.OneTimeDraftWithSignatureImageResult = OneTimeDraftWithSignatureImageResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RecurringDraftWithSignatureImage", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class RecurringDraftWithSignatureImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public string Client_ID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=1)]
        public string ApiPassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=2)]
        public string Name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=3)]
        public string EmailAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=4)]
        public string Phone;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=5)]
        public string PhoneExtension;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=6)]
        public string Address1;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=7)]
        public string Address2;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=8)]
        public string City;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=9)]
        public string State;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=10)]
        public string Zip;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=11)]
        public string Country;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=12)]
        public string RoutingNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=13)]
        public string AccountNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=14)]
        public string BankName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=15)]
        public string CheckMemo;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=16)]
        public string CheckAmount;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=17)]
        public string CheckDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=18)]
        public string CheckNumber;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=19)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ImageData;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=20)]
        public string RecurringType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=21)]
        public string RecurringOffset;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=22)]
        public string RecurringPayments;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=23)]
        public string x_delim_data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=24)]
        public string x_delim_char;
        
        public RecurringDraftWithSignatureImageRequest() {
        }
        
        public RecurringDraftWithSignatureImageRequest(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            this.Client_ID = Client_ID;
            this.ApiPassword = ApiPassword;
            this.Name = Name;
            this.EmailAddress = EmailAddress;
            this.Phone = Phone;
            this.PhoneExtension = PhoneExtension;
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.City = City;
            this.State = State;
            this.Zip = Zip;
            this.Country = Country;
            this.RoutingNumber = RoutingNumber;
            this.AccountNumber = AccountNumber;
            this.BankName = BankName;
            this.CheckMemo = CheckMemo;
            this.CheckAmount = CheckAmount;
            this.CheckDate = CheckDate;
            this.CheckNumber = CheckNumber;
            this.ImageData = ImageData;
            this.RecurringType = RecurringType;
            this.RecurringOffset = RecurringOffset;
            this.RecurringPayments = RecurringPayments;
            this.x_delim_data = x_delim_data;
            this.x_delim_char = x_delim_char;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RecurringDraftWithSignatureImageResponse", WrapperNamespace="CheckProcessing", IsWrapped=true)]
    public partial class RecurringDraftWithSignatureImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="CheckProcessing", Order=0)]
        public CloudService.GreenPayECheck.DraftResult RecurringDraftWithSignatureImageResult;
        
        public RecurringDraftWithSignatureImageResponse() {
        }
        
        public RecurringDraftWithSignatureImageResponse(CloudService.GreenPayECheck.DraftResult RecurringDraftWithSignatureImageResult) {
            this.RecurringDraftWithSignatureImageResult = RecurringDraftWithSignatureImageResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface eCheckSoapChannel : CloudService.GreenPayECheck.eCheckSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class eCheckSoapClient : System.ServiceModel.ClientBase<CloudService.GreenPayECheck.eCheckSoap>, CloudService.GreenPayECheck.eCheckSoap {
        
        public eCheckSoapClient() {
        }
        
        public eCheckSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public eCheckSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public eCheckSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public eCheckSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CloudService.GreenPayECheck.DraftResult OneTimeDraftRTV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.OneTimeDraftRTV(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> OneTimeDraftRTVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.OneTimeDraftRTVAsync(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.DraftResult OneTimeDraftBV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.OneTimeDraftBV(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> OneTimeDraftBVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.OneTimeDraftBVAsync(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.DraftResult RecurringDraftRTV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringDraftRTV(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> RecurringDraftRTVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringDraftRTVAsync(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.DraftResult RecurringDraftBV(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringDraftBV(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> RecurringDraftBVAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringDraftBVAsync(Client_ID, ApiPassword, Name, EmailAddress, Phone, PhoneExtension, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.DraftResult VerificationResult(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.VerificationResult(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> VerificationResultAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.VerificationResultAsync(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.DraftResult VerificationOverride(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.VerificationOverride(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.DraftResult> VerificationOverrideAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.VerificationOverrideAsync(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.InvoiceResult CombinationInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string InitialAmount, string InitialPaymentDate, string RecurringAmount, string RecurringPaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char) {
            return base.Channel.CombinationInvoice(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, InitialAmount, InitialPaymentDate, RecurringAmount, RecurringPaymentDate, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> CombinationInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string InitialAmount, string InitialPaymentDate, string RecurringAmount, string RecurringPaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char) {
            return base.Channel.CombinationInvoiceAsync(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, InitialAmount, InitialPaymentDate, RecurringAmount, RecurringPaymentDate, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.InvoiceResult RecurringInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char) {
            return base.Channel.RecurringInvoice(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, Amount, PaymentDate, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> RecurringInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string RecurringType, string RecurringOffset, string RecurringPayments, string x_delim_data, string x_delim_char) {
            return base.Channel.RecurringInvoiceAsync(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, Amount, PaymentDate, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.InvoiceResult OneTimeInvoice(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string x_delim_data, string x_delim_char) {
            return base.Channel.OneTimeInvoice(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, Amount, PaymentDate, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> OneTimeInvoiceAsync(string Client_ID, string ApiPassword, string PayorName, string EmailAddress, string ItemName, string ItemDescription, string Amount, string PaymentDate, string x_delim_data, string x_delim_char) {
            return base.Channel.OneTimeInvoiceAsync(Client_ID, ApiPassword, PayorName, EmailAddress, ItemName, ItemDescription, Amount, PaymentDate, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.InvoiceResult InvoiceStatus(string Client_ID, string ApiPassword, string Invoice_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.InvoiceStatus(Client_ID, ApiPassword, Invoice_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.InvoiceResult> InvoiceStatusAsync(string Client_ID, string ApiPassword, string Invoice_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.InvoiceStatusAsync(Client_ID, ApiPassword, Invoice_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.BillPayCheckResult BillPayCheck(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.BillPayCheck(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> BillPayCheckAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.BillPayCheckAsync(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.BillPayCheckResult RecurringBillPayCheck(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringBillPayCheck(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> RecurringBillPayCheckAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringBillPayCheckAsync(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, RoutingNumber, AccountNumber, BankName, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.BillPayCheckResult BillPayCheckNoBankInfo(string Client_ID, string ApiPassword, string Name, string Address1, string Address2, string City, string State, string Zip, string Country, string CheckMemo, string CheckAmount, string CheckDate, string CheckNumber, string x_delim_data, string x_delim_char) {
            return base.Channel.BillPayCheckNoBankInfo(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> BillPayCheckNoBankInfoAsync(string Client_ID, string ApiPassword, string Name, string Address1, string Address2, string City, string State, string Zip, string Country, string CheckMemo, string CheckAmount, string CheckDate, string CheckNumber, string x_delim_data, string x_delim_char) {
            return base.Channel.BillPayCheckNoBankInfoAsync(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, CheckMemo, CheckAmount, CheckDate, CheckNumber, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.BillPayCheckResult RecurringBillPayCheckNoBankInfo(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringBillPayCheckNoBankInfo(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.BillPayCheckResult> RecurringBillPayCheckNoBankInfoAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            return base.Channel.RecurringBillPayCheckNoBankInfoAsync(Client_ID, ApiPassword, Name, Address1, Address2, City, State, Zip, Country, CheckMemo, CheckAmount, CheckDate, CheckNumber, RecurringType, RecurringOffset, RecurringPayments, x_delim_data, x_delim_char);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CloudService.GreenPayECheck.UploadSignatureImageResponse CloudService.GreenPayECheck.eCheckSoap.UploadSignatureImage(CloudService.GreenPayECheck.UploadSignatureImageRequest request) {
            return base.Channel.UploadSignatureImage(request);
        }
        
        public CloudService.GreenPayECheck.SignatureImageResult UploadSignatureImage(string Client_ID, string ApiPassword, string Check_ID, byte[] ImageData, string x_delim_data, string x_delim_char) {
            CloudService.GreenPayECheck.UploadSignatureImageRequest inValue = new CloudService.GreenPayECheck.UploadSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Check_ID = Check_ID;
            inValue.ImageData = ImageData;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            CloudService.GreenPayECheck.UploadSignatureImageResponse retVal = ((CloudService.GreenPayECheck.eCheckSoap)(this)).UploadSignatureImage(inValue);
            return retVal.UploadSignatureImageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.UploadSignatureImageResponse> CloudService.GreenPayECheck.eCheckSoap.UploadSignatureImageAsync(CloudService.GreenPayECheck.UploadSignatureImageRequest request) {
            return base.Channel.UploadSignatureImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.UploadSignatureImageResponse> UploadSignatureImageAsync(string Client_ID, string ApiPassword, string Check_ID, byte[] ImageData, string x_delim_data, string x_delim_char) {
            CloudService.GreenPayECheck.UploadSignatureImageRequest inValue = new CloudService.GreenPayECheck.UploadSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Check_ID = Check_ID;
            inValue.ImageData = ImageData;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            return ((CloudService.GreenPayECheck.eCheckSoap)(this)).UploadSignatureImageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse CloudService.GreenPayECheck.eCheckSoap.OneTimeDraftWithSignatureImage(CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest request) {
            return base.Channel.OneTimeDraftWithSignatureImage(request);
        }
        
        public CloudService.GreenPayECheck.DraftResult OneTimeDraftWithSignatureImage(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string x_delim_data, 
                    string x_delim_char) {
            CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest inValue = new CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Name = Name;
            inValue.EmailAddress = EmailAddress;
            inValue.Phone = Phone;
            inValue.PhoneExtension = PhoneExtension;
            inValue.Address1 = Address1;
            inValue.Address2 = Address2;
            inValue.City = City;
            inValue.State = State;
            inValue.Zip = Zip;
            inValue.Country = Country;
            inValue.RoutingNumber = RoutingNumber;
            inValue.AccountNumber = AccountNumber;
            inValue.BankName = BankName;
            inValue.CheckMemo = CheckMemo;
            inValue.CheckAmount = CheckAmount;
            inValue.CheckDate = CheckDate;
            inValue.CheckNumber = CheckNumber;
            inValue.ImageData = ImageData;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse retVal = ((CloudService.GreenPayECheck.eCheckSoap)(this)).OneTimeDraftWithSignatureImage(inValue);
            return retVal.OneTimeDraftWithSignatureImageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse> CloudService.GreenPayECheck.eCheckSoap.OneTimeDraftWithSignatureImageAsync(CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest request) {
            return base.Channel.OneTimeDraftWithSignatureImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageResponse> OneTimeDraftWithSignatureImageAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string x_delim_data, 
                    string x_delim_char) {
            CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest inValue = new CloudService.GreenPayECheck.OneTimeDraftWithSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Name = Name;
            inValue.EmailAddress = EmailAddress;
            inValue.Phone = Phone;
            inValue.PhoneExtension = PhoneExtension;
            inValue.Address1 = Address1;
            inValue.Address2 = Address2;
            inValue.City = City;
            inValue.State = State;
            inValue.Zip = Zip;
            inValue.Country = Country;
            inValue.RoutingNumber = RoutingNumber;
            inValue.AccountNumber = AccountNumber;
            inValue.BankName = BankName;
            inValue.CheckMemo = CheckMemo;
            inValue.CheckAmount = CheckAmount;
            inValue.CheckDate = CheckDate;
            inValue.CheckNumber = CheckNumber;
            inValue.ImageData = ImageData;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            return ((CloudService.GreenPayECheck.eCheckSoap)(this)).OneTimeDraftWithSignatureImageAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse CloudService.GreenPayECheck.eCheckSoap.RecurringDraftWithSignatureImage(CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest request) {
            return base.Channel.RecurringDraftWithSignatureImage(request);
        }
        
        public CloudService.GreenPayECheck.DraftResult RecurringDraftWithSignatureImage(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest inValue = new CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Name = Name;
            inValue.EmailAddress = EmailAddress;
            inValue.Phone = Phone;
            inValue.PhoneExtension = PhoneExtension;
            inValue.Address1 = Address1;
            inValue.Address2 = Address2;
            inValue.City = City;
            inValue.State = State;
            inValue.Zip = Zip;
            inValue.Country = Country;
            inValue.RoutingNumber = RoutingNumber;
            inValue.AccountNumber = AccountNumber;
            inValue.BankName = BankName;
            inValue.CheckMemo = CheckMemo;
            inValue.CheckAmount = CheckAmount;
            inValue.CheckDate = CheckDate;
            inValue.CheckNumber = CheckNumber;
            inValue.ImageData = ImageData;
            inValue.RecurringType = RecurringType;
            inValue.RecurringOffset = RecurringOffset;
            inValue.RecurringPayments = RecurringPayments;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse retVal = ((CloudService.GreenPayECheck.eCheckSoap)(this)).RecurringDraftWithSignatureImage(inValue);
            return retVal.RecurringDraftWithSignatureImageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse> CloudService.GreenPayECheck.eCheckSoap.RecurringDraftWithSignatureImageAsync(CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest request) {
            return base.Channel.RecurringDraftWithSignatureImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.RecurringDraftWithSignatureImageResponse> RecurringDraftWithSignatureImageAsync(
                    string Client_ID, 
                    string ApiPassword, 
                    string Name, 
                    string EmailAddress, 
                    string Phone, 
                    string PhoneExtension, 
                    string Address1, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string Country, 
                    string RoutingNumber, 
                    string AccountNumber, 
                    string BankName, 
                    string CheckMemo, 
                    string CheckAmount, 
                    string CheckDate, 
                    string CheckNumber, 
                    byte[] ImageData, 
                    string RecurringType, 
                    string RecurringOffset, 
                    string RecurringPayments, 
                    string x_delim_data, 
                    string x_delim_char) {
            CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest inValue = new CloudService.GreenPayECheck.RecurringDraftWithSignatureImageRequest();
            inValue.Client_ID = Client_ID;
            inValue.ApiPassword = ApiPassword;
            inValue.Name = Name;
            inValue.EmailAddress = EmailAddress;
            inValue.Phone = Phone;
            inValue.PhoneExtension = PhoneExtension;
            inValue.Address1 = Address1;
            inValue.Address2 = Address2;
            inValue.City = City;
            inValue.State = State;
            inValue.Zip = Zip;
            inValue.Country = Country;
            inValue.RoutingNumber = RoutingNumber;
            inValue.AccountNumber = AccountNumber;
            inValue.BankName = BankName;
            inValue.CheckMemo = CheckMemo;
            inValue.CheckAmount = CheckAmount;
            inValue.CheckDate = CheckDate;
            inValue.CheckNumber = CheckNumber;
            inValue.ImageData = ImageData;
            inValue.RecurringType = RecurringType;
            inValue.RecurringOffset = RecurringOffset;
            inValue.RecurringPayments = RecurringPayments;
            inValue.x_delim_data = x_delim_data;
            inValue.x_delim_char = x_delim_char;
            return ((CloudService.GreenPayECheck.eCheckSoap)(this)).RecurringDraftWithSignatureImageAsync(inValue);
        }
        
        public CloudService.GreenPayECheck.CancelCheckResult CancelCheck(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CancelCheck(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.CancelCheckResult> CancelCheckAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CancelCheckAsync(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.RefundCheckResult RefundCheck(string Client_ID, string ApiPassword, string Check_ID, string RefundMemo, string RefundAmount, string x_delim_data, string x_delim_char) {
            return base.Channel.RefundCheck(Client_ID, ApiPassword, Check_ID, RefundMemo, RefundAmount, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.RefundCheckResult> RefundCheckAsync(string Client_ID, string ApiPassword, string Check_ID, string RefundMemo, string RefundAmount, string x_delim_data, string x_delim_char) {
            return base.Channel.RefundCheckAsync(Client_ID, ApiPassword, Check_ID, RefundMemo, RefundAmount, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.CheckNoteResult CheckNote(string Client_ID, string ApiPassword, string Check_ID, string Note, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckNote(Client_ID, ApiPassword, Check_ID, Note, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckNoteResult> CheckNoteAsync(string Client_ID, string ApiPassword, string Check_ID, string Note, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckNoteAsync(Client_ID, ApiPassword, Check_ID, Note, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.CheckNoPhoneVerificationResult CheckNoPhoneVerification(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckNoPhoneVerification(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckNoPhoneVerificationResult> CheckNoPhoneVerificationAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckNoPhoneVerificationAsync(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.ProcessInfoResult ProcessInfo(string Client_ID, string ApiPassword, string Process_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.ProcessInfo(Client_ID, ApiPassword, Process_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.ProcessInfoResult> ProcessInfoAsync(string Client_ID, string ApiPassword, string Process_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.ProcessInfoAsync(Client_ID, ApiPassword, Process_ID, x_delim_data, x_delim_char);
        }
        
        public CloudService.GreenPayECheck.CheckStatusResult CheckStatus(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckStatus(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
        
        public System.Threading.Tasks.Task<CloudService.GreenPayECheck.CheckStatusResult> CheckStatusAsync(string Client_ID, string ApiPassword, string Check_ID, string x_delim_data, string x_delim_char) {
            return base.Channel.CheckStatusAsync(Client_ID, ApiPassword, Check_ID, x_delim_data, x_delim_char);
        }
    }
}
